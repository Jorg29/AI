class Node:
    def __init__(self, name, value):
        self.name = name
        self.value = value

class Graph:

    def __init__(self):
        self.al = {}

    def addNode(self, node, lst):
        self.al[node] = lst
    
    def bfs(self, node):
        print (node.name)
        level = {node: 0}

        neighbors = {node: None}

        i = 1  

        queue = [node]

        while queue:
            next_node = []
            for x in queue:
                for v in self.al[x]:
                    if v not in level:
                        print (v.name)
                        level[v] = i
                        neighbors [v] = x
                        next_node.append(v)

            queue = next_node
            i += 1
        return level

    def dfs_visit(self, x, visited):
        if x in visited.keys():
            return
        else:
            print (x.name)
            visited[x] = True
            for w in self.al[x]:
                self.dfs_visit(w, visited)

    def dfs(self, node):
        print (node.name)
        visited = {node: True}

        for w in self.al[node]:
            self.dfs_visit(w, visited)

if __name__ == '__main__':
    

    A = Node('A', 5)
    B = Node('B', 3)
    C = Node('C', 6)
    D = Node('D', 7)
    E = Node('E', 9)

    g = Graph()
    g.addNode(A, [B,D])
    g.addNode(B, [C])
    g.addNode(C, [C])
    g.addNode(D, [E])
    g.addNode(E, [E])


    g.dfs(A)
